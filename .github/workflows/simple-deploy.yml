name: Simple Deploy Test

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: sa-east-1
  ECR_REPOSITORY: nft-portal

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      packages: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check secrets
        run: |
          echo "Checking secrets..."
          echo "AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID != '' && 'SET' || 'NOT SET' }}"
          echo "EC2_HOST: ${{ secrets.EC2_HOST != '' && 'SET' || 'NOT SET' }}"
          echo "SECRET_KEY: ${{ secrets.SECRET_KEY != '' && 'SET' || 'NOT SET' }}"

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Test AWS
        run: |
          aws sts get-caller-identity
          echo "AWS connection OK"

      - name: Create ECR repos
        run: |
          for repo in "${ECR_REPOSITORY}-web" "${ECR_REPOSITORY}-frontend"; do
            if ! aws ecr describe-repositories --repository-names "$repo" >/dev/null 2>&1; then
              aws ecr create-repository --repository-name "$repo"
              echo "Created $repo"
            else
              echo "$repo exists"
            fi
          done

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set tags
        id: vars
        run: |
          echo "sha=${GITHUB_SHA}" >> $GITHUB_OUTPUT
          echo "registry=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_OUTPUT

      - name: Build backend
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile
          push: true
          tags: |
            ${{ steps.vars.outputs.registry }}/${{ env.ECR_REPOSITORY }}-web:${{ steps.vars.outputs.sha }}
            ${{ steps.vars.outputs.registry }}/${{ env.ECR_REPOSITORY }}-web:latest

      - name: Build frontend
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: frontend/Dockerfile
          target: prod
          push: true
          build-args: |
            VITE_API_BASE_URL=https://api.nftmarketplace.com.br
          tags: |
            ${{ steps.vars.outputs.registry }}/${{ env.ECR_REPOSITORY }}-frontend:${{ steps.vars.outputs.sha }}
            ${{ steps.vars.outputs.registry }}/${{ env.ECR_REPOSITORY }}-frontend:latest

      - name: Test SSH
        env:
          TARGET: ${{ secrets.EC2_HOST }}
        run: |
          echo "Testing SSH to $TARGET"
          timeout 5 bash -c "</dev/tcp/$TARGET/22" && echo "SSH OK" || echo "SSH failed"

      - name: Deploy
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_KEY: ${{ secrets.EC2_SSH_KEY }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          TAG: ${{ steps.vars.outputs.sha }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        run: |
          mkdir -p ~/.ssh
          echo "$EC2_KEY" > ~/.ssh/ec2_key
          chmod 600 ~/.ssh/ec2_key
          
          ssh -i ~/.ssh/ec2_key -o StrictHostKeyChecking=no "$EC2_USER@$EC2_HOST" << 'EOF'
          echo "Connected to EC2"
          sudo mkdir -p /opt/nft_portal
          echo "SECRET_KEY=$SECRET_KEY" | sudo tee /opt/nft_portal/.env
          echo "POSTGRES_DB=$POSTGRES_DB" | sudo tee -a /opt/nft_portal/.env
          echo "POSTGRES_USER=$POSTGRES_USER" | sudo tee -a /opt/nft_portal/.env
          echo "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" | sudo tee -a /opt/nft_portal/.env
          echo "Deploy completed"
          EOF
