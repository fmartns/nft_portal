name: Test Deploy Workflow

on:
  workflow_dispatch:  # Permite execução manual
  push:
    branches: [ "main" ]

env:
  AWS_REGION: sa-east-1
  ECR_REPOSITORY: nft-portal

jobs:
  test-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      packages: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check required secrets
        run: |
          echo "Checking if required secrets are configured..."
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            echo "❌ AWS_ACCESS_KEY_ID is not set"
            exit 1
          fi
          if [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
            echo "❌ AWS_SECRET_ACCESS_KEY is not set"
            exit 1
          fi
          if [ -z "${{ secrets.EC2_HOST }}" ]; then
            echo "❌ EC2_HOST is not set"
            exit 1
          fi
          if [ -z "${{ secrets.EC2_USER }}" ]; then
            echo "❌ EC2_USER is not set"
            exit 1
          fi
          if [ -z "${{ secrets.EC2_SSH_KEY }}" ]; then
            echo "❌ EC2_SSH_KEY is not set"
            exit 1
          fi
          if [ -z "${{ secrets.SECRET_KEY }}" ]; then
            echo "❌ SECRET_KEY is not set"
            exit 1
          fi
          if [ -z "${{ secrets.POSTGRES_DB }}" ]; then
            echo "❌ POSTGRES_DB is not set"
            exit 1
          fi
          if [ -z "${{ secrets.POSTGRES_USER }}" ]; then
            echo "❌ POSTGRES_USER is not set"
            exit 1
          fi
          if [ -z "${{ secrets.POSTGRES_PASSWORD }}" ]; then
            echo "❌ POSTGRES_PASSWORD is not set"
            exit 1
          fi
          echo "✅ All required secrets are configured"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Test AWS connection
        run: |
          echo "Testing AWS connection..."
          aws sts get-caller-identity
          echo "✅ AWS connection successful"

      - name: Test SSH connectivity
        shell: bash
        env:
          TARGET: ${{ secrets.EC2_HOST }}
        run: |
          echo "Testing SSH connectivity to $TARGET..."
          if command -v nc >/dev/null 2>&1; then
            nc -z -w 5 "$TARGET" 22
          else
            timeout 5 bash -c "</dev/tcp/$TARGET/22" || { echo "SSH port 22 not reachable"; exit 1; }
          fi
          echo "✅ SSH port 22 is reachable"

      - name: Check Docker files exist
        run: |
          echo "Checking if required Docker files exist..."
          if [ ! -f "docker/Dockerfile" ]; then
            echo "❌ docker/Dockerfile not found"
            exit 1
          fi
          if [ ! -f "docker/docker-compose.prod.yml" ]; then
            echo "❌ docker/docker-compose.prod.yml not found"
            exit 1
          fi
          if [ ! -f "frontend/Dockerfile" ]; then
            echo "❌ frontend/Dockerfile not found"
            exit 1
          fi
          if [ ! -f "docker/nginx/nginx.conf" ]; then
            echo "❌ docker/nginx/nginx.conf not found"
            exit 1
          fi
          if [ ! -f "docker/nginx/nginx.ssl.conf" ]; then
            echo "❌ docker/nginx/nginx.ssl.conf not found"
            exit 1
          fi
          echo "✅ All required Docker files exist"

      - name: Test Docker build (backend)
        run: |
          echo "Testing backend Docker build..."
          docker build -f docker/Dockerfile -t test-backend .
          echo "✅ Backend Docker build successful"

      - name: Test Docker build (frontend)
        run: |
          echo "Testing frontend Docker build..."
          docker build -f frontend/Dockerfile --target prod -t test-frontend ./frontend
          echo "✅ Frontend Docker build successful"

      - name: Test base64 encoding
        run: |
          echo "Testing base64 encoding of deployment files..."
          echo "compose_b64=$(base64 -w0 docker/docker-compose.prod.yml)"
          echo "nginx_b64=$(base64 -w0 docker/nginx/nginx.conf)"
          echo "nginx_ssl_b64=$(base64 -w0 docker/nginx/nginx.ssl.conf)"
          echo "✅ Base64 encoding successful"

      - name: Summary
        run: |
          echo "🎉 All tests passed! The deploy workflow should work."
          echo "Next steps:"
          echo "1. Make sure all secrets are configured in GitHub"
          echo "2. Ensure EC2 instance is running and accessible"
          echo "3. Push to main branch to trigger the actual deploy"
