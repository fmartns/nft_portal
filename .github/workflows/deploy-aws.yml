name: Build, Push to ECR and Deploy to EC2

on:
  push:
    branches: [ "main", "develop" ]
    tags: [ "v*" ]

env:
  AWS_REGION: sa-east-1
  # Base name for your ECR repositories (two repos will be used: "-web" and "-frontend")
  ECR_REPOSITORY: nft-portal

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write    # to use OIDC if configured
      packages: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure ECR repositories exist
        shell: bash
        run: |
          set -e
          for repo in "${ECR_REPOSITORY}-web" "${ECR_REPOSITORY}-frontend"; do
            if ! aws ecr describe-repositories --repository-names "$repo" >/dev/null 2>&1; then
              aws ecr create-repository --repository-name "$repo" >/dev/null
              echo "Created ECR repo: $repo"
            else
              echo "ECR repo exists: $repo"
            fi
          done

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set image tags
        id: vars
        run: |
          echo "sha=${GITHUB_SHA}" >> $GITHUB_OUTPUT
          echo "registry=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push backend image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile
          push: true
          tags: |
            ${{ steps.vars.outputs.registry }}/${{ env.ECR_REPOSITORY }}-web:${{ steps.vars.outputs.sha }}
            ${{ steps.vars.outputs.registry }}/${{ env.ECR_REPOSITORY }}-web:latest
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build and push frontend image (dist publisher)
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: frontend/Dockerfile
          target: build
          push: true
          build-args: |
            VITE_API_BASE_URL=https://api.nftmarketplace.com.br
          tags: |
            ${{ steps.vars.outputs.registry }}/${{ env.ECR_REPOSITORY }}-frontend:${{ steps.vars.outputs.sha }}
            ${{ steps.vars.outputs.registry }}/${{ env.ECR_REPOSITORY }}-frontend:latest
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Copy compose and nginx config to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          # Comma-separated patterns to avoid empty tar issue
          source: "docker/docker-compose.prod.yml,docker/nginx/nginx.conf"
          target: /opt/nft_portal

      - name: Deploy on EC2 (pull images and restart)
        uses: appleboy/ssh-action@v1.1.0
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          TAG: ${{ steps.vars.outputs.sha }}
          AWS_REGION: ${{ env.AWS_REGION }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script_stop: true
          script: |
            set -e
            sudo mkdir -p /opt/nft_portal/docker/nginx
            # Move files into expected paths (scp placed them under /opt/nft_portal/docker/... if path includes docker/)
            if [ -f /opt/nft_portal/docker-compose.prod.yml ]; then
              sudo mkdir -p /opt/nft_portal/docker
              sudo mv -f /opt/nft_portal/docker-compose.prod.yml /opt/nft_portal/docker/docker-compose.prod.yml || true
            fi
            if [ -f /opt/nft_portal/nginx.conf ]; then
              sudo mkdir -p /opt/nft_portal/docker/nginx
              sudo mv -f /opt/nft_portal/nginx.conf /opt/nft_portal/docker/nginx/nginx.conf || true
            fi

            # Verify application .env exists (used by services)
            if [ ! -f /opt/nft_portal/.env ]; then
              echo "ERROR: /opt/nft_portal/.env missing. Create it with Django/DB/Redis settings and rerun."
              exit 1
            fi

            cd /opt/nft_portal
            # Ensure AWS CLI is available for ECR login (best-effort install if missing)
            if ! command -v aws >/dev/null 2>&1; then
              echo "AWS CLI not found. Attempting to install..."
              if command -v apt-get >/dev/null 2>&1; then
                sudo apt-get update -y && sudo apt-get install -y awscli || true
              elif command -v yum >/dev/null 2>&1; then
                sudo yum install -y awscli || true
              fi
            fi
            # Login to ECR from the EC2 instance
            aws ecr get-login-password --region ${AWS_REGION} | sudo docker login --username AWS --password-stdin ${ECR_REGISTRY}

            export ECR_REGISTRY=${ECR_REGISTRY}
            export ECR_REPOSITORY=${ECR_REPOSITORY}
            export TAG=${TAG}

            # Pull and start updated services
            sudo docker compose -f docker/docker-compose.prod.yml pull
            sudo docker compose -f docker/docker-compose.prod.yml up -d
            # Optional cleanup
            sudo docker image prune -f
